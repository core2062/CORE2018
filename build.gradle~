plugins {
    id "cpp"
    id "visual-studio"
    id "jaci.openrio.gradle.GradleRIO" version "2018.03.06"
}

def TEAM = 2062

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcNative', jaci.openrio.gradle.frc.FRCNativeArtifact) {
            targets << "roborio"
            component = 'frcUserProgram'
            //debug = true
        }
    }
}

// Defining my C++ project. In this case, it is called 'frcUserProgram',
// and is of the language C++.
model {
	repositories {
        libs(PrebuiltLibraries) {
            seasocks {
                headers.srcDir "CORERobotLib/3rdparty/seasocks/src/main/c"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("CORERobotLib/3rdparty/seasocks/" + getPlatformPath(targetPlatform) + "/libseasocks.a")
                }
            }
            json {
                headers.srcDir "CORERobotLib/3rdparty/json/src"
            }
			CORERobotLib {
				headers.srcDir "CORERobotLib/src"
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file("CORERobotLib/lib/libCORERobotLib.a")
				}
			}
        }
    }
    components {
        frcUserProgram(NativeExecutableSpec) {
            // Target the RoboRIO (arm-frc-linux-gnueabihf)
            targetPlatform 'roborio'
            sources.cpp {
                // This is where our source files are located (src/cpp for C++ files, src/include for headers)
                source {
                    srcDirs = ['src']
                    include '**/*.cpp'
                }
                exportedHeaders{
                    srcDirs = ['src']
                    include '**/*.h'
                }

                // Define my dependencies. In this case, WPILib (+ friends), CTRE Phoenix (Talon SRX) and NavX.
				lib library: "json", linkage: "api"
                lib library: "seasocks", linkage: "static"
                lib library: "wpilib"
                lib library: "ctre"
                lib library: "navx"
				lib library: "CORERobotLib", linkage: "static"
            }
        }
    }
}

def getPlatformPath(Platform platform) {
    if (platform.operatingSystem.windows) {
        return "Windows/amd64/"
    } else if (platform.architecture.arm) {
        return "Linux/arm/"
    } else {
        return "Linux/amd64/"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}
